{
  "src/components/AngledEdge.js": {
    "description": "This component draws an angled path between a source and target. The\nsource and target are specified as props x1, y1 and x2, y2.\n\nThe angle of the path is either left aligned (vertical, then horizontal)\nor right aligned (horizontal, then vertical) as specified by curve\ndirection.  The offset and position prop are used to position the line\nin relation to the endpoints for bi-directional purposes.\n\nAn arrow may be added by passing an 'arrow' prop of true and may be\ncustomized by supplying arrowWidth and/or arrowHeight. It defaults to\nbeing the width*1.5 wide and width*2 long.\n\nStroke color and width can also be supplied.",
    "displayName": "AngledEdge",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "rotateOffset",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "cx",
            "type": null
          },
          {
            "name": "x",
            "type": null
          },
          {
            "name": "y",
            "type": null
          },
          {
            "name": "a",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "offset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An offset to the position of the label which can be used for fine tuning",
        "defaultValue": {
          "value": "15",
          "computed": false
        }
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The width of the circuit diagram",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      },
      "color": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "\"#ddd\"",
          "computed": false
        }
      },
      "curveDirection": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "\"left\"",
          "computed": false
        }
      },
      "arrow": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Boolean value that controls if a directional arrow is drawn instead of line-caps.\nWhen arrow is set to \"true\", the vector between x1, y1 and x2, y2 will have the\nLine-caps replaced with a directional arrow. Arrowheads can be sized using the\narrowWidth and arrowHeight property.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "position": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the angle of the offset from the center of the line.",
        "defaultValue": {
          "value": "30",
          "computed": false
        }
      },
      "selected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display the endpoint selected",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "muted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display the endpoint muted",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "src/components/ArcEdge.js": {
    "description": "This component draws a curved path between a source and target. The\nsource and target are specified as props x1, y1 and x2, y2.\n\nThe curve of the path arcs through a point offset from the mid-point\nof the line between source and target. This is specified as the prop\noffset. The offset may be \"left\" or \"right\" as specified as curveDirection.\n\nAn arrow may be added by passing an 'arrow' prop of true and may be\ncustomized by supplying arrowWidth and/or arrowHeight. It defaults to\nbeing the width*1.5 wide and width*2 long.0\n\nStroke color and width can also be supplied.",
    "displayName": "ArcEdge",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "offset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An offset to the position of the label which can be used for fine tuning",
        "defaultValue": {
          "value": "20",
          "computed": false
        }
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The width of the circuit diagram",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      },
      "color": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "\"#ddd\"",
          "computed": false
        }
      },
      "curveDirection": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "\"left\"",
          "computed": false
        }
      },
      "arrow": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Boolean value that controls if a directional arrow is drawn instead of line-caps.\nWhen arrow is set to \"true\", the vector between x1, y1 and x2, y2 will have the\nLine-caps replaced with a directional arrow. Arrowheads can be sized using the\narrowWidth and arrowHeight property.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "position": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the angle of the offset from the center of the line.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "selected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display the endpoint selected",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "muted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display the endpoint muted",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "src/components/BaseMap.js": {
    "description": "The BaseMap forms a general network drawing component which\ndoesn't assume that the drawing is of a Network. It is used\nby the `<TrafficMap>` to produce the chart seen of the front\npage of my.es.net.",
    "displayName": "BaseMap",
    "methods": [
      {
        "name": "handleNodeMouseDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "id",
            "type": null
          },
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleSelectionChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "type",
            "type": null
          },
          {
            "name": "id",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleMouseMove",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleMouseUp",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "getOffsetMousePosition",
        "docblock": "Get the event mouse position relative to the event rect",
        "modifiers": [],
        "params": [
          {
            "name": "e"
          }
        ],
        "returns": null,
        "description": "Get the event mouse position relative to the event rect"
      },
      {
        "name": "scale",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "topology": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "The topology structure, as detailed above. This contains the\ndescriptions of nodes, edges and paths used to render the topology"
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The width of the circuit diagram",
        "defaultValue": {
          "value": "800",
          "computed": false
        }
      },
      "height": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The height of the circuit diagram",
        "defaultValue": {
          "value": "600",
          "computed": false
        }
      },
      "margin": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The blank margin around the diagram drawing",
        "defaultValue": {
          "value": "20",
          "computed": false
        }
      },
      "bounds": {
        "type": {
          "name": "shape",
          "value": {
            "x1": {
              "name": "number",
              "required": false
            },
            "y1": {
              "name": "number",
              "required": false
            },
            "x2": {
              "name": "number",
              "required": false
            },
            "y2": {
              "name": "number",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Specified as an object containing x1, y1 and x2, y2. This is the region\nto display on the map. If this isn't specified the bounds will be\ncalculated from the nodes in the Map.",
        "defaultValue": {
          "value": "{ x1: 0, y1: 0, x2: 1, y2: 1 }",
          "computed": false
        }
      },
      "edgeDrawingMethod": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"simple\"",
              "computed": false
            },
            {
              "value": "\"bidirectionalArrow\"",
              "computed": false
            },
            {
              "value": "\"pathBidirectionalArrow\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The is the overall rendering style for the edge connections. Maybe\none of the following strings:\n\n * \"simple\" - simple line connections between nodes\n * \"bidirectionalArrow\" - network traffic represented by bi-directional arrows\n * \"pathBidirectionalArrow\" - similar to \"bidirectionalArrow\", but only for\n edges that are used in the currently displayed path(s).",
        "defaultValue": {
          "value": "\"simple\"",
          "computed": false
        }
      },
      "legendItems": {
        "type": {
          "name": "shape",
          "value": {
            "x": {
              "name": "number",
              "required": false
            },
            "y": {
              "name": "number",
              "required": false
            },
            "edgeTypes": {
              "name": "object",
              "required": false
            },
            "nodeTypes": {
              "name": "object",
              "required": false
            },
            "colorSwatches": {
              "name": "object",
              "required": false
            }
          }
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "null",
          "computed": false
        }
      },
      "selection": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "{ nodes: {}, edges: {} }",
          "computed": false
        }
      },
      "paths": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "pathWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "5",
          "computed": false
        }
      }
    }
  },
  "src/components/BasicCircuit.js": {
    "description": "Renders a horizontal circuit by determining `x1`, `x2`, `y1`, `y2`\ncoordinates on the page and then render a basic circuit by combining the\nconnection and endpoint props. Connection shape, style, and label information,\nare passed in as props",
    "displayName": "BasicCircuit",
    "methods": [
      {
        "name": "renderCircuitTitle",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "title",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderParentNavigation",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "parentId",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderDisabledOverlay",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "disabled",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderCircuitElements",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "lineStyle": {
        "type": {
          "name": "object"
        },
        "required": true,
        "description": "The style of the line"
      },
      "lineShape": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"linear\"",
              "computed": false
            },
            {
              "value": "\"curved\"",
              "computed": false
            },
            {
              "value": "\"square\"",
              "computed": false
            },
            {
              "value": "\"angled\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Text value describing the shape of the line, \"linear\", \"curved\", etc."
      },
      "connectionLabelPosition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"top\"",
              "computed": false
            },
            {
              "value": "\"center\"",
              "computed": false
            },
            {
              "value": "\"bottom\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Describes the position of the connection label."
      },
      "circuitLabel": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "string"
              }
            }
          ]
        },
        "required": false,
        "description": "String to be displayed for the connection. If an array of strings is\nsupplied they will be displayed in a multi-line layout."
      },
      "yOffset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Vertical distance from the center line to offset the connection label."
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The string to display in the top left corner of the diagram."
      },
      "noNavigate": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Boolean value that determines if the element uses the onSelectionChange\nchange and can be clicked",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "size": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the size of the square"
      },
      "centerLine": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "controls if a horizontal line is drawn down the center of a square"
      },
      "squareWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "This value is used to determine X coordinates for a square, if you want\nthe square to be smaller than the default line width. Overrides the\nmargin prop if a square is displayed",
        "defaultValue": {
          "value": "25",
          "computed": false
        }
      },
      "endpointStyle": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The style of the endpoint.\nTODO: be more explicit here about the expected shape."
      },
      "endpointLabelPosition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"left\"",
              "computed": false
            },
            {
              "value": "\"right\"",
              "computed": false
            },
            {
              "value": "\"top\"",
              "computed": false
            },
            {
              "value": "\"topright\"",
              "computed": false
            },
            {
              "value": "\"topleft\"",
              "computed": false
            },
            {
              "value": "\"bottom\"",
              "computed": false
            },
            {
              "value": "\"bottomright\"",
              "computed": false
            },
            {
              "value": "\"bottomleft\"",
              "computed": false
            },
            {
              "value": "\"bottomleftangled\"",
              "computed": false
            },
            {
              "value": "\"bottomrightangled\"",
              "computed": false
            },
            {
              "value": "\"topleftangled\"",
              "computed": false
            },
            {
              "value": "\"toprightangled\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The position of the label around the endpoint."
      },
      "endpointLabelA": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Left side endpoint label"
      },
      "endpointLabelZ": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Right side endpoint label"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disables the circuit by muting the colors and disabling events.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onSelectionChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback specified to handle selection of the circuit. The value supplied\nto the callback is whatever was specified in the navTo prop."
      },
      "navTo": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Value passed down to the click handler at the lowest level primitive.\nWill return to the onSelectionChange its value."
      },
      "parentId": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "If provided, will render a small nav arrow that when clicked,\nnavigates to that element. Used mainly when we want to show a parent / child\nrelationship between two circuits."
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The width of the circuit diagram",
        "defaultValue": {
          "value": "851",
          "computed": false
        }
      },
      "height": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "250",
          "computed": false
        }
      },
      "titleOffsetX": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "10",
          "computed": false
        }
      },
      "titleOffsetY": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "15",
          "computed": false
        }
      },
      "margin": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The blank margin around the diagram drawing",
        "defaultValue": {
          "value": "100",
          "computed": false
        }
      },
      "roundedX": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "5",
          "computed": false
        }
      },
      "roundedY": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "5",
          "computed": false
        }
      }
    }
  },
  "src/components/BidirectionalEdge.js": {
    "description": "",
    "displayName": "BidirectionalEdge",
    "methods": [],
    "props": {
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The width of the circuit diagram",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      },
      "spacing": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "This is the vertical spacing",
        "defaultValue": {
          "value": "3.5",
          "computed": false
        }
      },
      "offset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An offset to the position of the label which can be used for fine tuning",
        "defaultValue": {
          "value": "18",
          "computed": false
        }
      },
      "sourceTargetColor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "\"#C9CACC\"",
          "computed": false
        }
      },
      "targetSourceColor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "\"#C9CACC\"",
          "computed": false
        }
      },
      "selected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display the endpoint selected",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "muted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display the endpoint muted",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "src/components/ConcatenatedCircuit.js": {
    "description": "Draw a Concatenated circuit\n\nThis component determines the (x1, y1), (x2, y2) coordinates on the page\nand then renders a group of circuits by combining the\nconnection and endpoint props. Connection shape, style, and label information,\nare passed in as props.\n\nThis is of the form:\n    [endpoint, connection, endpoint, connection, endpoint, ...]",
    "displayName": "ConcatenatedCircuit",
    "methods": [
      {
        "name": "renderCircuitTitle",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "title",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderParentNavigation",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "parentId",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderDisabledOverlay",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "disabled",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderCircuitElements",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The width of the circuit diagram",
        "defaultValue": {
          "value": "851",
          "computed": false
        }
      },
      "height": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The height of the circuit diagram",
        "defaultValue": {
          "value": "250",
          "computed": false
        }
      },
      "titleOffsetX": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The position of the title relative to the left side of the diagram",
        "defaultValue": {
          "value": "10",
          "computed": false
        }
      },
      "titleOffsetY": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The position of the title relative to the top of the diagram",
        "defaultValue": {
          "value": "15",
          "computed": false
        }
      },
      "margin": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The blank margin around the diagram drawing",
        "defaultValue": {
          "value": "100",
          "computed": false
        }
      },
      "lineShape": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"linear\"",
              "computed": false
            },
            {
              "value": "\"square\"",
              "computed": false
            },
            {
              "value": "\"angled\"",
              "computed": false
            },
            {
              "value": "\"arc\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Controls shape of the line, can be \"linear\", \"square\", \"angled\", \"arc\"."
      },
      "memberList": {
        "type": {
          "name": "array"
        },
        "required": true,
        "description": "To accurately display each of the member circuits, the concatenated circuit\nrequires an ordered array of circuit objects, where each object contains\nthe props to be used by the lower level connection and endpoint primitives.\nSince the list renders sequentially, it assumes that the member circuits are in order. The list can be any length and needs to be constructed as such:\n\n```\nconst memberList = [\n    {\n        styleProperties: darkFiberStyle,\n        endpointStyle: stylesMap.endpoint,\n        endpointLabelA: \"Endpoint 1\",\n        endpointLabelZ: \"Endpoint 2\",\n        circuitLabel: \"Member 1\",\n        navTo: \"Member 1\"\n    }, {\n        styleProperties: couplerStyle,\n        endpointStyle: stylesMap.endpoint,\n        endpointLabelA: \"Endpoint 2\",\n        endpointLabelZ: \"Endpoint 3\",\n        circuitLabel: \"Member 2\",\n        navTo: \"Member 2\"\n    }, {\n        styleProperties: leasedStyle,\n        endpointStyle: stylesMap.endpoint,\n        endpointLabelA: \"Endpoint 3\",\n        endpointLabelZ: \"Endpoint 4\",\n        circuitLabel: \"Member 3\",\n        navTo: \"Member 3\"\n    }\n];\n```"
      },
      "connectionLabelPosition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"top\"",
              "computed": false
            },
            {
              "value": "\"center\"",
              "computed": false
            },
            {
              "value": "\"bottom\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Described the position of the connection label; accepts **\"top\"**, **\"center\"**, or **\"bottom\"**"
      },
      "endpointLabelPosition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"left\"",
              "computed": false
            },
            {
              "value": "\"right\"",
              "computed": false
            },
            {
              "value": "\"top\"",
              "computed": false
            },
            {
              "value": "\"topright\"",
              "computed": false
            },
            {
              "value": "\"topleft\"",
              "computed": false
            },
            {
              "value": "\"bottom\"",
              "computed": false
            },
            {
              "value": "\"bottomright\"",
              "computed": false
            },
            {
              "value": "\"bottomleft\"",
              "computed": false
            },
            {
              "value": "\"bottomleftangled\"",
              "computed": false
            },
            {
              "value": "\"bottomrightangled\"",
              "computed": false
            },
            {
              "value": "\"topleftangled\"",
              "computed": false
            },
            {
              "value": "\"toprightangled\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The position of the label around the endpoint."
      },
      "yOffset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "This is the vertical distance from the center line to offset\nthe connection label."
      },
      "endpointLabelOffset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "This is the distance from the endpoint that the endpoint\nlabel will be rendered."
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The string to display in the top left corner of the diagram"
      },
      "hideTitle": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Value that determines whether or not the upper left corner title is displayed"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Determines if the circuit view is muted.  Typically used in\nconjunction with `parentID`",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onSelectionChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback function used to handle clicks."
      },
      "parentId": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Value that if provided, will render a small nav arrow that\nwhen clicked, navigates to that element. Used mainly when we want\nto show a parent / child relationship between two circuits."
      },
      "noNavigate": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Boolean value that determines if the element uses the onSelectionChange\nchange and can be clicked",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "squareWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "This value is used to determine X coordinates for a square, if you want\nthe square to be smaller than the default line width. Overrides the\nmargin prop if a square is displayed",
        "defaultValue": {
          "value": "25",
          "computed": false
        }
      },
      "roundedX": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "When the endpoint shape is a `square`, this controls the radius of corners.",
        "defaultValue": {
          "value": "5",
          "computed": false
        }
      },
      "roundedY": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "When the endpoint shape is a `square`, this controls the radius of corners.",
        "defaultValue": {
          "value": "5",
          "computed": false
        }
      }
    }
  },
  "src/components/Connection.js": {
    "description": "The `x1`, `x2`, `y1`, and `y2` properties determine the position of the endpoints on the `<svg>` element.\nA path is then drawn betwween the endpoints. If the lineShape property is set to \"square\",\nthe width of the square will be the distance between x1 and x2, with the height of the square\ndetermined by the size prop.\n\nThe `labelPosition`, determines where the label will be positioned around the line. The `xOffset` and\n`yOffset` properties allow you to customize the distance the label is from the `x` and `y` properties.\n\nThe `label` property is the name that will be displayed on the line. If you want to display multiple\nlines, the label can take an array of strings, with each array element displayed on a separate line.",
    "displayName": "Connection",
    "methods": [
      {
        "name": "handleMouseOver",
        "docblock": "User hovers over the circuit",
        "modifiers": [],
        "params": [],
        "returns": null,
        "description": "User hovers over the circuit"
      },
      {
        "name": "handleMouseOut",
        "docblock": "Use stops hovering over circuit",
        "modifiers": [],
        "params": [],
        "returns": null,
        "description": "Use stops hovering over circuit"
      },
      {
        "name": "handleSelectionChanged",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "value",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderEndpoints",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "lineShape": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"linear\"",
              "computed": false
            },
            {
              "value": "\"square\"",
              "computed": false
            },
            {
              "value": "\"angled\"",
              "computed": false
            },
            {
              "value": "\"arc\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Controls shape of the line, can be \"linear\", \"square\", \"angled\", \"arc\".",
        "defaultValue": {
          "value": "\"linear\"",
          "computed": false
        }
      },
      "x1": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the x-coordinate of the line beginning."
      },
      "x2": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the x-coordinate of the line end."
      },
      "y1": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the y-coordinate of the line beginning."
      },
      "y2": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the y-coordinate of the line end."
      },
      "label": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "string"
              }
            }
          ]
        },
        "required": false,
        "description": "Provides label to be displayed; Takes either a string, or an array of\nstrings for multi-line labels."
      },
      "labelPosition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"top\"",
              "computed": false
            },
            {
              "value": "\"bottom\"",
              "computed": false
            },
            {
              "value": "\"center\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Controls where label is situated around the line.",
        "defaultValue": {
          "value": "\"top\"",
          "computed": false
        }
      },
      "labelOffsetX": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the x pixel offset from labelPosition"
      },
      "labelOffsetY": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the y pixel offset from labelPosition"
      },
      "textAnchor": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"begin\"",
              "computed": false
            },
            {
              "value": "\"middle\"",
              "computed": false
            },
            {
              "value": "\"end\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Controls the justification of the text label"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Object prop that controls the inline style for the react element.\n\nThe style has three components, one for the two Line-caps (`node`),\none for the label (`label`) and one for the line (`line`). Each group\nhas up to four different possible options depending on the way the\nline and endpoint should be rendered:\n * `normal` - provides the standard view of the component\n * `selected` - for when the component is clicked\n * `muted` - for when the component is in the background\n * `highlighted` - is used when the component is hovered over\n\nThe muted and selected props are boolean values that tell the lower\nlevel primitive that you want to use these styles. They will default\nto false unless specified. The `fill` css style on each category is used\nfor line-caps and square connections, allowing different colors to be\nspecified for the interior of the shapes."
      },
      "muted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display the endpoint muted",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "selected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display the endpoint selected",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "roundedX": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "When the endpoint shape is a `square`, this controls the radius of corners."
      },
      "roundedY": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "When the endpoint shape is a `square`, this controls the radius of corners."
      },
      "size": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Used to determine the height of the square if the endpoint shape is a `square`,\nas well as when calculating the label position around a square.",
        "defaultValue": {
          "value": "40",
          "computed": false
        }
      },
      "centerLine": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Boolean value that controls if a horizontal line is drawn down the center of a square."
      },
      "position": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the angle of the offset from the center of the line.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "curveOffset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the distance from the center x axis the curve will arc through",
        "defaultValue": {
          "value": "20",
          "computed": false
        }
      },
      "bendOffset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the length of the offset line"
      },
      "curveDirection": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"left\"",
              "computed": false
            },
            {
              "value": "\"right\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The curveDirection property determines whether the curve moves to the\nleft or the right of the non-horizontal vector between x1,y1 and x2,y2.\nThe curveOffset property specifies the distance of the curve from the vector\nbetween x1, y1 and x2, y2. When position is specified, this will offset a linear,\nor curved line from the x1, y1, x2, y2 corrdinates using a combination of\nvectors.\n\nThis functions slightly differently for angled connections and\nwill instead rotate a point offset from the x and y by an angle. If the\ncurveDirection is left, this will move clockwise, and will move counterClockwise if right.",
        "defaultValue": {
          "value": "\"right\"",
          "computed": false
        }
      },
      "radius": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the size of the Line-cap",
        "defaultValue": {
          "value": "2",
          "computed": false
        }
      },
      "endpointShape": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"circle\"",
              "computed": false
            },
            {
              "value": "\"square\"",
              "computed": false
            },
            {
              "value": "\"cloud\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Controls the shape of the line-cap.",
        "defaultValue": {
          "value": "\"circle\"",
          "computed": false
        }
      },
      "endPointRoundedX": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "If a square endpoint shape is used, controls the corner rounding of the x-axis of the square"
      },
      "endPointRoundedY": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "If a square endpoint shape is used, controls the corner rounding of the y-axis of the square"
      },
      "arrow": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Boolean value that controls if a directional arrow is drawn instead of line-caps.\nWhen arrow is set to \"true\", the vector between x1, y1 and x2, y2 will have the\nLine-caps replaced with a directional arrow. Arrowheads can be sized using the\narrowWidth and arrowHeight property.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "arrowWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the width of an arrow head",
        "defaultValue": {
          "value": "10",
          "computed": false
        }
      },
      "arrowHeight": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the height of an arrow head",
        "defaultValue": {
          "value": "10",
          "computed": false
        }
      },
      "noNavigate": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Boolean value that determines if the element uses the onSelectionChange change and can be clicked",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onSelectionChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback specified to handle selection of the circuit. The value supplied\nto the callback is whatever was specified in the navTo prop."
      },
      "navTo": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Value passed down to the click handler at the lowest level primitive.\nWill return to the onSelectionChange its value."
      },
      "classed": {
        "defaultValue": {
          "value": "\"circuit\"",
          "computed": false
        }
      }
    }
  },
  "src/components/Endpoint.js": {
    "description": "Endpoint drawing primative. This essentially renders the shape we use to represent\nfor an endpoint on the circuit diagrams. The result is a `<g>` element containing\nthe endpoint rendering, so this needs to be used within the context of an `<svg>` block, or\nmore likely, just use a `<Circuit>`.\n\nThe `x` and `y` props determine the position of the endpoint on the svg grid, while\n'labelPosition' determines where the label for the endpoint will be positioned around\nthe endpoint. The `offset` property allow you to customize the distance the label has\nfrom the endpoint's `x` and `y` as the initial position of the label is determined\nbased on these props. The `offset` property has no effect on the angled labels, as\nthese require pre-determined offset distances based on the rotation. The `label` prop\nis the name that will be displayed on the endpoint.",
    "displayName": "Endpoint",
    "methods": [],
    "props": {
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The label for the endpoint"
      },
      "labelPosition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"left\"",
              "computed": false
            },
            {
              "value": "\"right\"",
              "computed": false
            },
            {
              "value": "\"top\"",
              "computed": false
            },
            {
              "value": "\"topright\"",
              "computed": false
            },
            {
              "value": "\"topleft\"",
              "computed": false
            },
            {
              "value": "\"bottom\"",
              "computed": false
            },
            {
              "value": "\"bottomright\"",
              "computed": false
            },
            {
              "value": "\"bottomleft\"",
              "computed": false
            },
            {
              "value": "\"bottomleftangled\"",
              "computed": false
            },
            {
              "value": "\"bottomrightangled\"",
              "computed": false
            },
            {
              "value": "\"topleftangled\"",
              "computed": false
            },
            {
              "value": "\"toprightangled\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Where the label is positioned relative to the endpoint node as well\nas how the label is drawn (angled or not).",
        "defaultValue": {
          "value": "\"top\"",
          "computed": false
        }
      },
      "offset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An offset to the position of the label which can be used for fine tuning",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "shape": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"circle\"",
              "computed": false
            },
            {
              "value": "\"square\"",
              "computed": false
            },
            {
              "value": "\"cloud\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The shape of the endpoint",
        "defaultValue": {
          "value": "\"circle\"",
          "computed": false
        }
      },
      "radius": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "When the endpoint shape is a `circle`, this controls the size of the endpoint",
        "defaultValue": {
          "value": "7",
          "computed": false
        }
      },
      "roundedX": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "When the endpoint shape is a `square`, this controls the radius of corners"
      },
      "roundedY": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "When the endpoint shape is a `square`, this controls the radius of corners"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The style of the `<Endpoint>` has two components, one for the\nendpoint itself (node) and one for the label (the label). Each group\nhas three different possible options depending on the way the\nendpoint should be rendered:\n\n * `normal` provides the standard view of the endpoint\n * `selected` for when the endpoint is moused over\n * `muted` for when the endpoint is not selected.\n\nFor example:\n\n```\nconst endpointStyle = {\n    node: {\n        normal: {fill: \"none\", stroke: \"#DBDBDB\", strokeWidth: 4},\n        selected: {fill: \"none\", stroke: \"#B1B1B1\", strokeWidth: 6},\n        muted: {fill: \"none\", stroke: \"#DBDBDB\", strokeWidth: 2, opacity: 0.6, cursor: \"pointer\"}\n    },\n    label: {\n        normal: {fill: \"#9D9D9D\", fontSize: 10, fontFamily: \"verdana, sans-serif\"},\n        selected: {fill: \"#333\",stroke: \"none\", fontSize: 11},\n        muted: {fill: \"#696969\", stroke: \"none\", fontSize: 9, opacity: 0.6}\n    }\n}\n```"
      },
      "muted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display the endpoint muted",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "selected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display the endpoint as selected",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "highlighted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display the endpoint highlighted",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "src/components/Equipment.js": {
    "description": "An equipment is an svg rect that needs to know its width, height, and style.\nIt receives its x and y starting position from the parent rack element, or a \ndefault derived from a specified offset value.\n\nIt takes a label as well in the form of a string or list of strings if multilines are desired",
    "displayName": "Equipment",
    "methods": [
      {
        "name": "handleMouseOver",
        "docblock": "User hovers over the equipment",
        "modifiers": [],
        "params": [],
        "returns": null,
        "description": "User hovers over the equipment"
      },
      {
        "name": "handleMouseOut",
        "docblock": "Use stops hovering over equipment",
        "modifiers": [],
        "params": [],
        "returns": null,
        "description": "Use stops hovering over equipment"
      },
      {
        "name": "handleSelectionChanged",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "value",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "noNavigate": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "labelPosition": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "\"top\"",
          "computed": false
        }
      },
      "classed": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "\"equipment\"",
          "computed": false
        }
      },
      "labelDirection": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "\"horizontal\"",
          "computed": false
        }
      },
      "selected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "muted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "src/components/EquipmentBase.js": {
    "description": "An equipment is an svg rect that needs to know its width, height, and style.\nIt receives its x and y starting position from the parent rack element, or a \ndefault derived from a specified offset value.\n\nIt takes a label as well in the form of a string or list of strings if multilines are desired",
    "displayName": "EquipmentBase",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      }
    ]
  },
  "src/components/Label.js": {
    "description": "Gets an x, y, labelPosition, textAnchor and rotation and\nrenders a label based on the position.\nThe label can be a single string, or an array of strings\nto display on multiple lines.",
    "displayName": "Label",
    "methods": [],
    "props": {
      "r": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "xOffset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Horizontal distance from the center line to offset the connection label.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "yOffset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Vertical distance from the center line to offset the connection label.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      }
    }
  },
  "src/components/LinearEdge.js": {
    "description": "This component draws a linear bent path between a source and target. The\nsource and target are specified as props 'x1', 'y1' and 'x2', 'y2'. The\nbend is specified with the prop 'position'.\n\nAn arrow may be added by passing an 'arrow' prop of true and may be\ncustomized by supplying 'arrowWidth' and/or 'arrowHeight'. Both default to\n10px.\n\nThe color and width of the edge may also be supplied.",
    "displayName": "LinearEdge",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The width of the circuit diagram",
        "defaultValue": {
          "value": "1",
          "computed": false
        }
      },
      "color": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "\"#ddd\"",
          "computed": false
        }
      },
      "position": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the angle of the offset from the center of the line.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "arrow": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Boolean value that controls if a directional arrow is drawn instead of line-caps.\nWhen arrow is set to \"true\", the vector between x1, y1 and x2, y2 will have the\nLine-caps replaced with a directional arrow. Arrowheads can be sized using the\narrowWidth and arrowHeight property.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "selected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display the endpoint selected",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "muted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display the endpoint muted",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "src/components/MapEditor.js": {
    "description": "",
    "displayName": "MapEditor",
    "methods": [
      {
        "name": "constrain",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "x",
            "type": null
          },
          {
            "name": "y",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "makeId",
        "docblock": "When we create new elements we give it a id",
        "modifiers": [],
        "params": [],
        "returns": null,
        "description": "When we create new elements we give it a id"
      },
      {
        "name": "findNode",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "id",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "findEdge",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "id",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "nodeSize",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "nodeShape",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "edgeThickness",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "capacity",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "edgeShape",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "edgeCurveDirection",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "edgeCurveOffset",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "bounds",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "cloneTopo",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "buildTopology",
        "docblock": "Build a topology suitable for passing into the BaseMap for rendering\nas nodes and edges",
        "modifiers": [],
        "params": [],
        "returns": null,
        "description": "Build a topology suitable for passing into the BaseMap for rendering\nas nodes and edges"
      },
      {
        "name": "handleSelectionChanged",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "selectionType",
            "type": null
          },
          {
            "name": "selectionId",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "attr",
            "type": null
          },
          {
            "name": "value",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleNodeDrag",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "id",
            "type": null
          },
          {
            "name": "posx",
            "type": null
          },
          {
            "name": "posy",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleAddNode",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleAddNodePosition",
        "docblock": "TODO: actual handling of the add node should be done at\nthe application level (action) rather than down here in the editor.",
        "modifiers": [],
        "params": [
          {
            "name": "posx"
          },
          {
            "name": "posy"
          }
        ],
        "returns": null,
        "description": "TODO: actual handling of the add node should be done at\nthe application level (action) rather than down here in the editor."
      },
      {
        "name": "handleAddEdge",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleDeleteNode",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleDeleteEdge",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleAddSelection",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "node",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleDeleteNodeSelection",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "nodeId",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleDeleteEdgeSelection",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "edgeId",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderTextProperty",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "attr",
            "type": null
          },
          {
            "name": "value",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderIntegerProperty",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "attr",
            "type": null
          },
          {
            "name": "value",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderChoiceProperty",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "attr",
            "type": null
          },
          {
            "name": "options",
            "type": null
          },
          {
            "name": "value",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderNodeProperties",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderEdgeProperties",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderProperties",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderToolbar",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "renderMap",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "edgeThicknessMap": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "A mapping of the capacity field within the tologogy edge object\nto a line thickness for rendering the edges.\n\nExample:\n\n```\nconst edgeThicknessMap = {\n    \"100G\": 5,\n    \"10G\": 3,\n    \"1G\": 1.5,\n    \"subG\": 1\n};\n```",
        "defaultValue": {
          "value": "{\n    \"100G\": 5,\n    \"10G\": 3,\n    \"1G\": 1.5,\n    subG: 1\n}",
          "computed": false
        }
      },
      "selected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display the endpoint selected",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "edgeColorMap": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "nodeSizeMap": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "A mapping from the type field in the node object to a size to draw the shape\n\nExample:\n```\nconst nodeSizeMap = {\n    hub: 5.5,\n    esnet_site: 7\n};\n```",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "nodeShapeMap": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "edgeShapeMap": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "A mapping of the edge name (which is source + \"--\" + target) to a\ndict of edge shape options:\n * `shape` (either \"linear\" or \"curved\")\n * `direction` (if shape is curved, either \"left\" or \"right\")\n * `offset` (if shape is curved, the amount of curve, which is\n pixel offset from a straight line between the source and target at the midpoint)\n\nExample:\n```\nconst edgeShapeMap = {\n    \"ALBQ--DENV\": {\n    \"shape\": \"curved\",\n    \"direction\": \"right\",\n    \"offset\": 15\n}\n```",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "stylesMap": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "gridSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "0.25",
          "computed": false
        }
      }
    }
  },
  "src/components/MapLegend.js": {
    "description": "",
    "displayName": "MapLegend",
    "methods": [],
    "props": {
      "x": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the starting x co-ordinate",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "y": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the starting y co-ordinate",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "lineHeight": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the height of the line",
        "defaultValue": {
          "value": "20",
          "computed": false
        }
      },
      "columns": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Boolean variable whether we want to have columns or not",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      },
      "itemsPerColumn": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "If we have columns, how many items do we want in each column",
        "defaultValue": {
          "value": "4",
          "computed": false
        }
      },
      "columnWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width of each column",
        "defaultValue": {
          "value": "100",
          "computed": false
        }
      },
      "exampleWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Used to denote the width of a line when displaying the capacity or\nthe distance between the icon and the text in the legend",
        "defaultValue": {
          "value": "20",
          "computed": false
        }
      },
      "gutter": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "8",
          "computed": false
        }
      },
      "edgeColor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Color for the lines in the capacity map. The capacity map is a map where \nthe key is the capacity and the value represents the width of the line\nthat is drawn on the map",
        "defaultValue": {
          "value": "\"#333\"",
          "computed": false
        }
      },
      "nodeTypes": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "An array that describes the different types of nodes on the map.\n\nEg : [\n     { classed: \"esnet_site\", fill: \"#B0B0B0\", radius: 7, shape: \"square\", stroke: \"#B0B0B0\", text: \"Site\"},\n     { classed: \"hub\", fill: \"#CBCBCB\", radius: 7, shape: \"circle\", stroke: \"#CBCBCB\", text: \"Hub\" }\n];",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "edgeTypes": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "An array that describes the different sizes of the edges on the map.\n\nEg : [\n     { strokeWidth: 7, text: \"100 Gbps\" }\n     { strokeWidth: 4, text: \"40 Gbps\"}\n];",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "colorSwatches": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "An array that describes the colors corresponding to the traffic on the map\nand how to display that in the legend\n\nEg : [\n     { fill: \"#990000\", stroke: \"#990000\", text: \"50+ Gbps\" },\n     { fill: \"#bd0026\", stroke: \"#bd0026\", text: \"20 - 50\" },\n     { fill: \"#cc4c02\", stroke: \"#cc4c02\", text: \"10 - 20\" }\n];",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      }
    }
  },
  "src/components/Navigate.js": {
    "description": "Draws a navigation triangle used to navigate back up to the parent. This is\nprobably overblown at this point. This is only really used now to navigate\nback up to the parent circuit, but could be expanded if we want more\ncomplicated navigation in the future.",
    "displayName": "Navigate",
    "methods": [
      {
        "name": "handleMouseOver",
        "docblock": "User hovers over the navigational arrow",
        "modifiers": [],
        "params": [],
        "returns": null,
        "description": "User hovers over the navigational arrow"
      },
      {
        "name": "handleMouseOut",
        "docblock": "User stops hovering over navigational arrow",
        "modifiers": [],
        "params": [],
        "returns": null,
        "description": "User stops hovering over navigational arrow"
      },
      {
        "name": "handleMouseClick",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "navTo": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": ""
      },
      "direction": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "Directions.NORTH",
              "computed": true
            },
            {
              "value": "Directions.SOUTH",
              "computed": true
            }
          ]
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "Directions.SOUTH",
          "computed": true
        }
      },
      "margin": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "50",
          "computed": false
        }
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "851",
          "computed": false
        }
      },
      "height": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "200",
          "computed": false
        }
      },
      "onSelectionChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "src/components/Node.js": {
    "description": "",
    "displayName": "Node",
    "methods": [
      {
        "name": "spec",
        "docblock": "Provides a spec for the editor UI to render properties\nfor this node",
        "modifiers": [
          "static"
        ],
        "params": [],
        "returns": null,
        "description": "Provides a spec for the editor UI to render properties\nfor this node"
      },
      {
        "name": "handMouseClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "handleMouseOver",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleMouseDown",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "radius": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "When the node shape is a `circle`, this controls the size of the node",
        "defaultValue": {
          "value": "5",
          "computed": false
        }
      },
      "selected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display the node as selected",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "shape": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"circle\"",
              "computed": false
            },
            {
              "value": "\"square\"",
              "computed": false
            },
            {
              "value": "\"cloud\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The shape of the node",
        "defaultValue": {
          "value": "\"circle\"",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The style of the `<Node>` has two components, one for the\nnode itself and one for the label (the label). Each group\nhas three different possible options depending on the way the\nnode should be rendered:\n\n * `normal` provides the standard view of the node\n * `selected` for when the node is moused over\n * `muted` for when the node is not selected.\n\nFor example:\n\n```\nconst nodeStyle = {\n    node: {\n        normal: {fill: \"none\", stroke: \"#DBDBDB\", strokeWidth: 4},\n        selected: {fill: \"none\", stroke: \"#B1B1B1\", strokeWidth: 6},\n        muted: {fill: \"none\", stroke: \"#DBDBDB\", strokeWidth: 2, opacity: 0.6, cursor: \"pointer\"}\n    },\n    label: {\n        normal: {fill: \"#9D9D9D\", fontSize: 10, fontFamily: \"verdana, sans-serif\"},\n        selected: {fill: \"#333\",stroke: \"none\", fontSize: 11},\n        muted: {fill: \"#696969\", stroke: \"none\", fontSize: 9, opacity: 0.6}\n    }\n}\n```",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "isDragging": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "labelOffsetX": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the x pixel offset from labelPosition",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "labelOffsetY": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the y pixel offset from labelPosition",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "rx": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "When the node shape is a `square`, this controls the radius of corners.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "ry": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "When the node shape is a `square`, this controls the radius of corners.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      }
    }
  },
  "src/components/NodeLabel.js": {
    "description": "",
    "displayName": "NodeLabel",
    "methods": []
  },
  "src/components/ParallelCircuit.js": {
    "description": "A component for drawing parallel sets of circuits.",
    "displayName": "ParallelCircuit",
    "methods": [
      {
        "name": "renderCircuitTitle",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "title",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderParentNavigation",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "parentId",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderDisabledOverlay",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "disabled",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderCircuitElements",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The width of the circuit diagram",
        "defaultValue": {
          "value": "851",
          "computed": false
        }
      },
      "height": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The height of the circuit diagram",
        "defaultValue": {
          "value": "250",
          "computed": false
        }
      },
      "titleOffsetX": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The position of the title relative to the left side of the diagram",
        "defaultValue": {
          "value": "10",
          "computed": false
        }
      },
      "titleOffsetY": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The position of the title relative to the top of the diagram",
        "defaultValue": {
          "value": "15",
          "computed": false
        }
      },
      "margin": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The blank margin around the diagram drawing",
        "defaultValue": {
          "value": "100",
          "computed": false
        }
      },
      "lineShape": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"linear\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Controls shape of the line but currenly only can be \"linear\".",
        "defaultValue": {
          "value": "\"linear\"",
          "computed": false
        }
      },
      "memberList": {
        "type": {
          "name": "array"
        },
        "required": true,
        "description": "To accurately display each of the member circuits, the concatenated circuit\nrequires an ordered array of circuit objects, where each object contains\nthe props to be used by the lower level connection and endpoint primitives.\nSince the list renders sequentially, it assumes that the member circuits are in order. The list can be any length and needs to be constructed as such:\n\n```\nconst memberList = [\n    {\n        styleProperties: darkFiberStyle,\n        endpointStyle: stylesMap.endpoint,\n        endpointLabelA: \"Endpoint 1\",\n        endpointLabelZ: \"Endpoint 2\",\n        circuitLabel: \"Member 1\",\n        navTo: \"Member 1\"\n    }, {\n        styleProperties: couplerStyle,\n        endpointStyle: stylesMap.endpoint,\n        endpointLabelA: \"Endpoint 2\",\n        endpointLabelZ: \"Endpoint 3\",\n        circuitLabel: \"Member 2\",\n        navTo: \"Member 2\"\n    }, {\n        styleProperties: leasedStyle,\n        endpointStyle: stylesMap.endpoint,\n        endpointLabelA: \"Endpoint 3\",\n        endpointLabelZ: \"Endpoint 4\",\n        circuitLabel: \"Member 3\",\n        navTo: \"Member 3\"\n    }\n];\n```"
      },
      "connectionLabelPosition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"top\"",
              "computed": false
            },
            {
              "value": "\"center\"",
              "computed": false
            },
            {
              "value": "\"bottom\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Described the position of the connection label; accepts **\"top\"**, **\"center\"**, or **\"bottom\"**"
      },
      "endpointLabelPosition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"left\"",
              "computed": false
            },
            {
              "value": "\"right\"",
              "computed": false
            },
            {
              "value": "\"top\"",
              "computed": false
            },
            {
              "value": "\"topright\"",
              "computed": false
            },
            {
              "value": "\"topleft\"",
              "computed": false
            },
            {
              "value": "\"bottom\"",
              "computed": false
            },
            {
              "value": "\"bottomright\"",
              "computed": false
            },
            {
              "value": "\"bottomleft\"",
              "computed": false
            },
            {
              "value": "\"bottomleftangled\"",
              "computed": false
            },
            {
              "value": "\"bottomrightangled\"",
              "computed": false
            },
            {
              "value": "\"topleftangled\"",
              "computed": false
            },
            {
              "value": "\"toprightangled\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The position of the label around the endpoint."
      },
      "endpointLabelOffset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "This is the distance from the endpoint that the endpoint\nlabel will be rendered."
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The string to display in the top left corner of the diagram"
      },
      "hideTitle": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Value that determines whether or not the upper left corner title is displayed"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Determines if the circuit view is muted.  Typically used in\nconjunction with `parentID`",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "onSelectionChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback function used to handle clicks."
      },
      "parentId": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Value that if provided, will render a small nav arrow that\nwhen clicked, navigates to that element. Used mainly when we want\nto show a parent / child relationship between two circuits."
      },
      "noNavigate": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Boolean value that determines if the element uses the onSelectionChange\nchange and can be clicked",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      }
    }
  },
  "src/components/PatchPanel.js": {
    "description": "",
    "displayName": "PatchPanel",
    "methods": [
      {
        "name": "handleSelectionChange",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          },
          {
            "name": "value",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderPanelLabel",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "yStart",
            "type": null
          },
          {
            "name": "label",
            "type": null
          },
          {
            "name": "key",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderFrontBackLabel",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "yStart",
            "type": null
          },
          {
            "name": "key",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderPanels",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "panelMap",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderModule",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "module",
            "type": null
          },
          {
            "name": "moduleY",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderEndpoints",
        "docblock": "draws 0, 2, or 4 endpoints - determined by presence of Front, Back and Coupler",
        "modifiers": [],
        "params": [
          {
            "name": "circuitGroup"
          },
          {
            "name": "y"
          },
          {
            "name": "key"
          }
        ],
        "returns": null,
        "description": "draws 0, 2, or 4 endpoints - determined by presence of Front, Back and Coupler"
      },
      {
        "name": "renderConnections",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "circuitGroup",
            "type": null
          },
          {
            "name": "y",
            "type": null
          },
          {
            "name": "key",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "margin": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The blank margin around the diagram drawing",
        "defaultValue": {
          "value": "150",
          "computed": false
        }
      },
      "labelPosition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"left\"",
              "computed": false
            },
            {
              "value": "\"right\"",
              "computed": false
            },
            {
              "value": "\"center\"",
              "computed": false
            },
            {
              "value": "\"top\"",
              "computed": false
            },
            {
              "value": "\"topright\"",
              "computed": false
            },
            {
              "value": "\"topleft\"",
              "computed": false
            },
            {
              "value": "\"bottom\"",
              "computed": false
            },
            {
              "value": "\"bottomright\"",
              "computed": false
            },
            {
              "value": "\"bottomleft\"",
              "computed": false
            },
            {
              "value": "\"bottomleftangled\"",
              "computed": false
            },
            {
              "value": "\"bottomrightangled\"",
              "computed": false
            },
            {
              "value": "\"topleftangled\"",
              "computed": false
            },
            {
              "value": "\"toprightangled\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "\"top\"",
          "computed": false
        }
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The width of the circuit diagram",
        "defaultValue": {
          "value": "851",
          "computed": false
        }
      },
      "panels": {
        "type": {
          "name": "array"
        },
        "required": true,
        "description": "To accurately display each panel, modules, and groups of circuits,\nthe Patch Panel requires an array of panels, where each panel contains\na panel object.  The panel object has two keys, `panelName` to display\nthe title of the panel, and `modules` which is a two dimensional array\nof coupler objects.  The rendering is sequential, and will display each\npanel, with the panels modules and coupler groupings  in the order they\nare presented in the list.\n\nEach module in the two-dimensional `modules` array is an array of\ncoupler groupings objects.  The coupler groupings objects allways have:\n\n * `frontCircuit` - The circuit and its properties to be displayed to\n the left of the coupler.  May be left `null`\n * `backCircuit` - The circuit and its properties to be displayed to\n the right of the coupler.  May be left `null`\n * `coupler` - The circuit and its properties to be displayed in the\n center\n\nEach of these objects have there own style, labels, and navigation\ncontrols.  The below structure, will render one panel, with one module,\nwith 2 coupler groups.\n\n```js\nconst panels = [\n    {\n        panelName: \"Panel 1\",\n        modules: [\n            [\n                 {\n                     frontCircuit: {\n                         styleProperties: circuitTypeProperties.crossConnect,\n                         endpointStyle: stylesMap.endpoint,\n                         endpointLabelA: \"Endpoint 1\",\n                         endpointLabelZ: \"Endpoint 2\",\n                         circuitLabel: \"Member 1\",\n                         navTo: \"Member 1\",\n                     },\n                     coupler: {\n                         styleProperties: circuitTypeProperties.panelCoupler,\n                         endpointStyle: circuitTypeProperties.panelCoupler,\n                         endpointLabelA: \"Endpoint 2\",\n                         endpointlabelZ: \"Endpoint 3\",\n                         circuitLabel: \"1/2-SC\",\n                         navTo: \"Coupler 1/2\",\n                     },\n                     backCircuit: {\n                         styleProperties: circuitTypeProperties.leased,\n                         endpointStyle: stylesMap.endpoint,\n                         endpointLabelA: \"Endpoint 3\",\n                         endpointLabelZ: \"Endpoint 4\",\n                         circuitLabel: \"Member 3\",\n                         navTo: \"Member 3\",\n                     },\n                     frontLabel: \"Endpoint A\",\n                     backLabel: \"Endpoint Z\",\n                 },\n                 {\n                     frontCircuit: null,\n                     coupler: {\n                         styleProperties: circuitTypeProperties.panelCoupler,\n                         endpointStyle: circuitTypeProperties.panelCoupler,\n                         endpointLabelA: \"Endpoint 2\",\n                         endpointlabelZ: \"Endpoint 3\",\n                         circuitLabel: \"3/4-SC\",\n                         navTo: \"Coupler 3/4\",\n                     },\n                     backCircuit: null,\n                     frontLabel: \"Endpoint A\",\n                     backLabel: \"Endpoint Z\",\n                 },\n             ]\n         ]\n     }\n];\n```"
      },
      "panelStyle": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The style of the panel - this is the \"container\" for the modules and couplers."
      },
      "couplerStyle": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The style for the couplers, rendered in groups according to their modules."
      },
      "yOffset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "This is the vertical distance from the center line to offset the connection label",
        "defaultValue": {
          "value": "30",
          "computed": false
        }
      },
      "moduleSpacing": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "This is the vertical spacing between each module group"
      },
      "panelSpacing": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "This is the vertical spacing between each panel"
      },
      "couplerSpacing": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "This is the vertical spacing between each coupler"
      },
      "panelWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "This is the distance from the center of the \\<svg\\> grid that the panel\nis to be rendered"
      },
      "onSelectionChange": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Callback evoked when the selection changes"
      },
      "endpointLabelOffset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "This is the distance from the endpoint that the endpoint label will be rendered."
      },
      "roundedX": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the corner rounding of the center coupler on the x-axis",
        "defaultValue": {
          "value": "5",
          "computed": false
        }
      },
      "roundedY": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the corner rounding of the center coupler on the y-axis",
        "defaultValue": {
          "value": "5",
          "computed": false
        }
      },
      "couplerEndpointRadius": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the size of the couper line cap",
        "defaultValue": {
          "value": "10",
          "computed": false
        }
      },
      "endpointRoundedX": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the corner rounding of the square line-caps on the x-axis",
        "defaultValue": {
          "value": "2",
          "computed": false
        }
      },
      "endpointRoundedY": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the corner rounding of the square line-caps on the y-axis",
        "defaultValue": {
          "value": "2",
          "computed": false
        }
      },
      "couplerLabelPosition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"top\"",
              "computed": false
            },
            {
              "value": "\"bottom\"",
              "computed": false
            },
            {
              "value": "\"center\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Controls where label is situated in the center coupler",
        "defaultValue": {
          "value": "\"center\"",
          "computed": false
        }
      },
      "panelRoundedX": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the corner rounding of the panel on the x-axis",
        "defaultValue": {
          "value": "3",
          "computed": false
        }
      },
      "panelRoundedY": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the corner rounding of the panel on the y-axis",
        "defaultValue": {
          "value": "3",
          "computed": false
        }
      },
      "labelOffsetX": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the +/- x offset from labelPosition",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "labelOffsetY": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the +/- y offset from labelPosition",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      }
    }
  },
  "src/components/PowerNode.js": {
    "description": "",
    "displayName": "PowerNode",
    "methods": [
      {
        "name": "handleMouseOver",
        "docblock": "User hovers over the power node",
        "modifiers": [],
        "params": [],
        "returns": null,
        "description": "User hovers over the power node"
      },
      {
        "name": "handleMouseOut",
        "docblock": "Use stops hovering over power node",
        "modifiers": [],
        "params": [],
        "returns": null,
        "description": "Use stops hovering over power node"
      },
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "drawLabel",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "x",
            "type": null
          },
          {
            "name": "y",
            "type": null
          },
          {
            "name": "label",
            "type": null
          },
          {
            "name": "position",
            "type": null
          },
          {
            "name": "offset",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "radius": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "15",
          "computed": false
        }
      }
    }
  },
  "src/components/PowerNodeList.js": {
    "description": "",
    "displayName": "PowerNodeList",
    "methods": [
      {
        "name": "assignPowerNodes",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "power",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderPositionLabel",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "label",
            "type": null
          },
          {
            "name": "x",
            "type": null
          },
          {
            "name": "y",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "drawPowerNode",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "powerNode",
            "type": null
          },
          {
            "name": "key",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "positionPowerNodes",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "newNodes",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "xOffset": {
        "defaultValue": {
          "value": "10",
          "computed": false
        }
      },
      "yOffset": {
        "defaultValue": {
          "value": "30",
          "computed": false
        }
      },
      "positionLabelStyle": {
        "defaultValue": {
          "value": "{\n    fill: \"#9D9D9D\",\n    fontSize: 10,\n    fontFamily: \"verdana, sans-serif\"\n}",
          "computed": false
        }
      }
    }
  },
  "src/components/Rack.js": {
    "description": "",
    "displayName": "Rack",
    "methods": [
      {
        "name": "drawSide",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "width",
            "type": null
          },
          {
            "name": "height",
            "type": null
          },
          {
            "name": "xCorner",
            "type": null
          },
          {
            "name": "yCorner",
            "type": null
          },
          {
            "name": "key",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "buildRmuArray",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "childElements",
            "type": null
          },
          {
            "name": "rmuCount",
            "type": null
          },
          {
            "name": "inchToRmu",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "drawRack",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "rackPxHeight",
            "type": null
          },
          {
            "name": "rackPxWidth",
            "type": null
          },
          {
            "name": "rackPxOffset",
            "type": null
          },
          {
            "name": "inchToRmu",
            "type": null
          },
          {
            "name": "yOffsetTop",
            "type": null
          },
          {
            "name": "pxToInch",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "drawHeightMarkers",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "inchToRmu",
            "type": null
          },
          {
            "name": "middle",
            "type": null
          },
          {
            "name": "x",
            "type": null
          },
          {
            "name": "initialY",
            "type": null
          },
          {
            "name": "pxToInch",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "drawLabel",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "x",
            "type": null
          },
          {
            "name": "y",
            "type": null
          },
          {
            "name": "label",
            "type": null
          },
          {
            "name": "position",
            "type": null
          },
          {
            "name": "offset",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "renderChildren",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "childElements",
            "type": null
          },
          {
            "name": "rackPxHeight",
            "type": null
          },
          {
            "name": "rackPxWidth",
            "type": null
          },
          {
            "name": "rackPxOffset",
            "type": null
          },
          {
            "name": "inchToRmu",
            "type": null
          },
          {
            "name": "yOffsetTop",
            "type": null
          },
          {
            "name": "pxToInch",
            "type": null
          },
          {
            "name": "childMap",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "yOffsetTop": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "30",
          "computed": false
        }
      },
      "yOffsetBottom": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "40",
          "computed": false
        }
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "851",
          "computed": false
        }
      },
      "rackHeight": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Expressed in RMU",
        "defaultValue": {
          "value": "42",
          "computed": false
        }
      },
      "rackWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Expressed in Inches",
        "defaultValue": {
          "value": "19",
          "computed": false
        }
      },
      "pxToInch": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "10",
          "computed": false
        }
      },
      "widthOffset": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "0.875",
          "computed": false
        }
      },
      "rackStyle": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "{\n    stroke: \"#737373\",\n    strokeWidth: 1,\n    fill: \"#D5D5D5\"\n}",
          "computed": false
        }
      },
      "labelStyle": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "{\n    normal: {\n        fill: \"#9D9D9D\",\n        fontSize: 10,\n        fontFamily: \"verdana, sans-serif\"\n    }\n}",
          "computed": false
        }
      }
    }
  },
  "src/components/Resizable.js": {
    "description": "This takes a single child and inserts a prop 'width' on it that is the\ncurrent width of the this container. This is handy if you want to surround\na diagram and have this drive the width.",
    "displayName": "Resizable",
    "methods": [
      {
        "name": "handleResize",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      }
    ],
    "props": {
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": ""
      }
    }
  },
  "src/components/SimpleEdge.js": {
    "description": "",
    "displayName": "SimpleEdge",
    "methods": [],
    "props": {
      "color": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "\"#ddd\"",
          "computed": false
        }
      },
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The width of the circuit diagram",
        "defaultValue": {
          "value": "4",
          "computed": false
        }
      },
      "position": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the angle of the offset from the center of the line.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "selected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display the edge selected",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "muted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display the edge muted",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "invisible": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display the edge invisible",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "arrow": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Boolean value that controls if a directional arrow is drawn instead of line-caps.\nWhen arrow is set to \"true\", the vector between x1, y1 and x2, y2 will have the\nLine-caps replaced with a directional arrow. Arrowheads can be sized using the\narrowWidth and arrowHeight property.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "fillColor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Color of the edge",
        "defaultValue": {
          "value": "\"none\"",
          "computed": false
        }
      }
    }
  },
  "src/components/SquareEdge.js": {
    "description": "This component draws a rectangle using the source and target to determine sizing and position. The\nsource and target are specified as props 'x1', 'y1' and 'x2', 'y2'. Rounding is specified with the\nprops roundedX and roundedY.\n\n\nThe color and width of the rectangle may also be supplied.",
    "displayName": "SquareEdge",
    "methods": [
      {
        "name": "handleClick",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "e",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "_rotateOffset",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "cx",
            "type": null
          },
          {
            "name": "x",
            "type": null
          },
          {
            "name": "y",
            "type": null
          },
          {
            "name": "a",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "roundedX": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "When the endpoint shape is a `square`, this controls the radius of corners",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "roundedY": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "When the endpoint shape is a `square`, this controls the radius of corners",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "color": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "\"#ddd\"",
          "computed": false
        }
      },
      "position": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the angle of the offset from the center of the line.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "arrow": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Boolean value that controls if a directional arrow is drawn instead of line-caps.\nWhen arrow is set to \"true\", the vector between x1, y1 and x2, y2 will have the\nLine-caps replaced with a directional arrow. Arrowheads can be sized using the\narrowWidth and arrowHeight property.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "selected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display the endpoint selected",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "muted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display the endpoint muted",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "size": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the size of the square",
        "defaultValue": {
          "value": "40",
          "computed": false
        }
      }
    }
  },
  "src/components/TrafficMap.js": {
    "description": "A high level component for showing network topology, including visualizing\nnetwork traffic as a heat map.",
    "displayName": "TrafficMap",
    "methods": [
      {
        "name": "bounds",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "nodeSize",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "nodeShape",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "edgeThickness",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "capacity",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "edgeShape",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "edgeCurveDirection",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "edgeCurveOffset",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "name",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "selectEdgeColor",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "bps",
            "type": null
          }
        ],
        "returns": null
      },
      {
        "name": "filteredPaths",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "buildTopology",
        "docblock": null,
        "modifiers": [],
        "params": [],
        "returns": null
      },
      {
        "name": "handleSelectionChanged",
        "docblock": null,
        "modifiers": [],
        "params": [
          {
            "name": "selectionType",
            "type": null
          },
          {
            "name": "selection",
            "type": null
          }
        ],
        "returns": null
      }
    ],
    "props": {
      "width": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The width of the circuit diagram"
      },
      "topology": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "The topology structure, as detailed above. This contains the\ndescriptions of nodes, edges and paths used to render the topology"
      },
      "bounds": {
        "type": {
          "name": "shape",
          "value": {
            "x1": {
              "name": "number",
              "required": false
            },
            "y1": {
              "name": "number",
              "required": false
            },
            "x2": {
              "name": "number",
              "required": false
            },
            "y2": {
              "name": "number",
              "required": false
            }
          }
        },
        "required": false,
        "description": "Specified as an object containing x1, y1 and x2, y2. This is the region\nto display on the map. If this isn't specified the bounds will be\ncalculated from the nodes in the Map."
      },
      "edgeDrawingMethod": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"simple\"",
              "computed": false
            },
            {
              "value": "\"bidirectionalArrow\"",
              "computed": false
            },
            {
              "value": "\"pathBidirectionalArrow\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The is the overall rendering style for the edge connections. Maybe\none of the following strings:\n\n * \"simple\" - simple line connections between nodes\n * \"bidirectionalArrow\" - network traffic represented by bi-directional arrows\n * \"pathBidirectionalArrow\" - similar to \"bidirectionalArrow\", but only for\n edges that are used in the currently displayed path(s)."
      },
      "showPaths": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "arrayOf",
              "value": {
                "name": "string"
              }
            }
          ]
        },
        "required": false,
        "description": "Either a boolean or a list of path names. If a bool, and true, then all\npaths will be shown. If a list then only the paths in that list will be\nshown. The default is to show no paths.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "edgeThicknessMap": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "A mapping of the capacity field within the tologogy edge object\nto a line thickness for rendering the edges.\n\nExample:\n\n```\nconst edgeThicknessMap = {\n    \"100G\": 5,\n    \"10G\": 3,\n    \"1G\": 1.5,\n    \"subG\": 1\n};\n```",
        "defaultValue": {
          "value": "{\n    \"100G\": 5,\n    \"10G\": 3,\n    \"1G\": 1.5,\n    subG: 1\n}",
          "computed": false
        }
      },
      "edgeColor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The default color for an edge which isn't colored using the `edgeColorMap`.",
        "defaultValue": {
          "value": "\"#DDD\"",
          "computed": false
        }
      },
      "edgeColorMap": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "A mapping of traffic on the link, in Gbps, to a color and label. The label is because the same\nmapping can be used to create a legend for the map.\n\nExample:\n\n```\nconst edgeColorMap = [\n    { color: \"#990000\", label: \">=50 Gbps\", range: [50, 100] },\n    { color: \"#bd0026\", label: \"20 - 50\", range: [20, 50] },\n    { color: \"#cc4c02\", label: \"10 - 20\", range: [10, 20] },\n    { color: \"#016c59\", label: \"5 - 10\", range: [5, 10] },\n    { color: \"#238b45\", label: \"2 - 5\", range: [2, 5] },\n    { color: \"#3690c0\", label: \"1 - 2\", range: [1, 2] },\n    { color: \"#74a9cf\", label: \"0 - 1\", range: [0, 1] }\n];\n```",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "nodeSizeMap": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "A mapping from the type field in the node object to a size to draw the shape\n\nExample:\n```\nconst nodeSizeMap = {\n    hub: 5.5,\n    esnet_site: 7\n};\n```",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "nodeShapeMap": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Mapping of node name to shape (default is \"circle\", other options are\n\"cloud\" or \"square\", currently).\n\nExample:\n```\nconst nodeShapeMap = {\n    DENV: \"square\"\n};\n```",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "edgeShapeMap": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "A mapping of the edge name (which is source + \"--\" + target) to a\ndict of edge shape options:\n * `shape` (either \"linear\" or \"curved\")\n * `direction` (if shape is curved, either \"left\" or \"right\")\n * `offset` (if shape is curved, the amount of curve, which is\n pixel offset from a straight line between the source and target at the midpoint)\n\nExample:\n```\nconst edgeShapeMap = {\n    \"ALBQ--DENV\": {\n    \"shape\": \"curved\",\n    \"direction\": \"right\",\n    \"offset\": 15\n}\n```",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "selected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Display the endpoint selected",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "shape": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "\"circle\"",
              "computed": false
            },
            {
              "value": "\"square\"",
              "computed": false
            },
            {
              "value": "\"cloud\"",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The shape of the endpoint",
        "defaultValue": {
          "value": "\"circle\"",
          "computed": false
        }
      },
      "stylesMap": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "autoSize": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "",
        "defaultValue": {
          "value": "true",
          "computed": false
        }
      }
    }
  }
}